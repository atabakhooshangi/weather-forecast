Backend System Architecture
=========================

+------------------+     HTTP/WebSocket     +------------------+
|                  |<--------------------->|                  |
|    FastAPI       |                       |    ML Service    |
|    Backend       |                       |    (Predictor)   |
|                  |                       |                  |
+------------------+                       +------------------+
        |                                          |
        | API Calls                               | Predictions
        v                                          v
+------------------+                      +------------------+
|                  |<-------------------->|                  |
|    Redis Cache   |                      |    Database      |
|    (Caching)     |                      |    (PostgreSQL)  |
|                  |                      |                  |
+------------------+                      +------------------+

Component Details:
-----------------
[FastAPI Backend]
  ├── API Endpoints
  │   ├── /forecast (GET) - Weather predictions
  │   ├── /stations (GET) - Weather stations
  │   └── /health (GET) - Health check
  │
  ├── Dependencies
  │   ├── Redis Connection
  │   ├── ML Service Integration
  │   └── Database Connection
  │
  └── Middleware
      ├── CORS
      ├── Authentication
      └── Rate Limiting

[ML Service]
  ├── AsyncWeatherPredictor
  │   ├── predict() - Generate forecasts
  │   └── load_model() - Load ML model
  │
  └── Data Processing
      ├── Feature Engineering
      └── Data Validation

[Redis Cache]
  ├── Cache Configuration
  │   ├── TTL: 1800s (30 minutes)
  │   └── Prefix: "forecast_cache"
  │
  └── Cached Data
      ├── Weather Forecasts
      └── Station Data

[Database]
  ├── Tables
  │   ├── weather_stations
  │   ├── weather_data
  │   └── predictions
  │
  └── Functions
      ├── Data Aggregation
      └── Historical Queries

Data Flow:
----------
1. API Request
   FastAPI receives HTTP request

2. Cache Check
   FastAPI -> Redis: Check for cached data
   Redis -> FastAPI: Return cached data if available

3. ML Prediction (if no cache)
   FastAPI -> ML Service: Request prediction
   ML Service -> FastAPI: Return forecast data

4. Database Operations
   FastAPI -> Database: Store/retrieve data
   Database -> FastAPI: Return query results

5. Cache Update
   FastAPI -> Redis: Store new prediction data

6. Response
   FastAPI returns HTTP response

Legend:
-------
->    - Data flow direction
<->   - Bidirectional communication
[Box] - System component

Figure 4.2.1: Example Pydantic Models
===================================

Request Models:
--------------
class WeatherForecastRequest(BaseModel):
    station_id: str
    forecast_hours: int = Field(ge=1, le=72)
    include_metadata: bool = False

class StationDataRequest(BaseModel):
    station_ids: List[str]
    start_date: datetime
    end_date: datetime
    metrics: List[str] = ["temperature", "humidity", "pressure"]

Response Models:
---------------
class WeatherForecast(BaseModel):
    station_id: str
    timestamp: datetime
    temperature: float
    humidity: float
    pressure: float
    wind_speed: float
    wind_direction: int
    precipitation: float
    confidence_score: float

class StationMetadata(BaseModel):
    station_id: str
    name: str
    location: Dict[str, float]  # {latitude: float, longitude: float}
    elevation: float
    last_updated: datetime
    status: str

class ForecastResponse(BaseModel):
    forecasts: List[WeatherForecast]
    metadata: Optional[StationMetadata]
    generated_at: datetime
    model_version: str

Example Usage:
-------------
Request:
{
    "station_id": "STN001",
    "forecast_hours": 24,
    "include_metadata": true
}

Response:
{
    "forecasts": [
        {
            "station_id": "STN001",
            "timestamp": "2024-03-20T12:00:00Z",
            "temperature": 22.5,
            "humidity": 65.0,
            "pressure": 1013.2,
            "wind_speed": 5.2,
            "wind_direction": 180,
            "precipitation": 0.0,
            "confidence_score": 0.95
        }
    ],
    "metadata": {
        "station_id": "STN001",
        "name": "Central Weather Station",
        "location": {
            "latitude": 40.7128,
            "longitude": -74.0060
        },
        "elevation": 10.5,
        "last_updated": "2024-03-20T11:55:00Z",
        "status": "active"
    },
    "generated_at": "2024-03-20T12:00:00Z",
    "model_version": "1.2.0"
}

Figure 6.1.1: Docker Architecture
===============================

+------------------------------------------------------------------+
|                        Docker Network                             |
|                                                                   |
|  +----------------+     +----------------+     +----------------+ |
|  |                |     |                |     |                | |
|  |   Frontend     |     |    Backend     |     |     Redis      | |
|  |   Container    |     |   Container    |     |   Container    | |
|  |                |     |                |     |                | |
|  |  Vue.js App    |     |  FastAPI App   |     |  Cache Store   | |
|  |  Port: 5173    |     |  Port: 8000    |     |  Port: 6381    | |
|  |                |     |                |     |                | |
|  +----------------+     +----------------+     +----------------+ |
|         |                      |                      |           |
|         |    HTTP/WebSocket    |                      |           |
|         +--------------------->|                      |           |
|         |                      |                      |           |
|         |                      |     Redis Protocol   |           |
|         |                      +--------------------->|           |
|         |                      |                      |           |
|         |                      |<---------------------+           |
|         |                      |                      |           |
|         |<---------------------+                      |           |
|         |                      |                      |           |
|  +----------------+                                    |           |
|  |                |                                    |           |
|  |   Cassandra    |                                    |           |
|  |   Container    |                                    |           |
|  |                |                                    |           |
|  |  Time Series   |                                    |           |
|  |  Database      |                                    |           |
|  |  Port: 9042    |                                    |           |
|  |                |                                    |           |
|  +----------------+                                    |           |
|         ^                                               |           |
|         |                                               |           |
|         |  ETL Loader                                   |           |
|         |  (External)                                   |           |
|         |                                               |           |
+------------------------------------------------------------------+

Container Details:
-----------------
[Frontend Container]
  ├── Base Image: node:18-alpine
  ├── Dependencies
  │   ├── Vue.js
  │   ├── Chart.js
  │   └── Axios
  │
  └── Configuration
      ├── VITE_PORT: 5173
      └── API_URL: http://backend:8000

[Backend Container]
  ├── Base Image: python:3.11-slim
  ├── Dependencies
  │   ├── FastAPI
  │   ├── Uvicorn
  │   └── Redis-py
  │
  └── Configuration
      ├── PORT: 8000
      └── REDIS_URL: redis://redis:6381

[Redis Container]
  ├── Base Image: redis:7-alpine
  ├── Configuration
  │   ├── Port: 6381
  │   └── Max Memory: 512mb
  │
  └── Persistence
      └── Volume: /data

[Cassandra Container]
  ├── Base Image: cassandra:4.1
  ├── Configuration
  │   ├── Port: 9042
  │   ├── Cluster Name: WeatherForecastCluster
  │   └── Replication: SimpleStrategy
  │
  └── Persistence
      └── Volume: /var/lib/cassandra

Network Configuration:
--------------------
Network Name: weather-forecast-network
Driver: bridge
Subnet: 172.20.0.0/16

Volume Mounts:
-------------
- Frontend: /app/node_modules
- Backend: /app/models
- Redis: /data
- Cassandra: /var/lib/cassandra

Environment Variables:
--------------------
Frontend:
  - VITE_API_URL=http://backend:8000
  - NODE_ENV=production

Backend:
  - REDIS_URL=redis://redis:6381
  - LOG_LEVEL=info

Redis:
  - REDIS_PASSWORD=your_secure_password
  - MAXMEMORY=512mb

Cassandra:
  - CASSANDRA_CLUSTER_NAME=WeatherForecastCluster
  - CASSANDRA_DC=datacenter1
  - CASSANDRA_USERNAME=cassandra
  - CASSANDRA_PASSWORD=cassandra

Chapter 6: Dockerization and Deployment
=====================================

6.1 Containerization Strategy
----------------------------
The weather forecasting system implements containerization using Docker, ensuring consistency and portability across environments. The architecture consists of independent services that communicate through well-defined interfaces.

Key architectural elements include:

1. Service Components:
   - Frontend (Vue.js): Served on port 5173, handling user interface and data visualization
   - Backend (FastAPI): Running on port 8000, managing ML model serving and business logic
   - Redis Cache: Operating on port 6381, providing high-performance caching
   - Cassandra: Running on port 9042, dedicated to time-series data storage for ETL processes

2. Service Independence:
   - Each service runs in its own container
   - Clear separation of concerns
   - Defined communication protocols between services

Figure 6.1.1: High-level architecture diagram of the Dockerized system, showing frontend, backend, Redis, and Cassandra containers running within a shared network.

6.2 Container Configuration
--------------------------
The system employs a multi-container setup orchestrated via Docker Compose, with each service configured for its specific purpose.

1. Frontend Container:
   - Base Image: node:18-alpine
   - Port: 5173
   - Dependencies:
     * Vue.js for UI components
     * Chart.js for data visualization
     * Axios for API communication
   - Environment Configuration:
     * VITE_API_URL for backend communication

2. Backend Container:
   - Base Image: python:3.11-slim
   - Port: 8000
   - Dependencies:
     * FastAPI for REST API
     * Uvicorn for ASGI server
     * Redis-py for caching
     * TensorFlow for ML model serving
   - Environment Configuration:
     * REDIS_URL for cache connection

3. Redis Container:
   - Base Image: redis:7-alpine
   - Port: 6381
   - Configuration:
     * Custom port to avoid conflicts
     * Persistence through volume mounting
   - Health Checks:
     * Regular ping monitoring

4. Cassandra Container:
   - Base Image: cassandra:4.1
   - Port: 9042
   - Configuration:
     * Cluster name: WeatherForecastCluster
     * Replication strategy: SimpleStrategy
     * Custom initialization scripts
   - Persistence:
     * Volume mounting for data durability

6.3 Network Architecture
-----------------------
The system implements a Docker network for service communication:

1. Docker Network Configuration:
   - Network Name: weather-forecast-network
   - Driver: bridge
   - Subnet: 172.20.0.0/16

2. Inter-Service Communication:
   - Frontend → Backend: HTTP/WebSocket
   - Backend → Redis: Redis Protocol
   - ETL → Cassandra: CQL Protocol

6.4 Volume Management
--------------------
Persistent storage is implemented through Docker volumes:

1. Redis Data:
   - Volume: redis_data
   - Mount Point: /data
   - Purpose: Cache persistence

2. Cassandra Data:
   - Volume: cassandra_data
   - Mount Point: /var/lib/cassandra
   - Purpose: Time-series data storage

6.5 Deployment Strategy
----------------------
The deployment pipeline includes:

1. Container Build:
   - Dockerfile for each service
   - Environment-specific configurations
   - Dependency management

2. Service Orchestration:
   - Docker Compose for service management
   - Health checks for critical services
   - Environment variable injection

6.6 Security Implementation
--------------------------
Basic security measures implemented:

1. Container Security:
   - Minimal base images (Alpine-based)
   - Service isolation through Docker network

2. Network Security:
   - Internal network isolation
   - Port exposure control
   - Service authentication through environment variables

This containerization strategy provides a consistent and portable environment for the weather forecasting system, with clear separation of services and defined communication patterns. 